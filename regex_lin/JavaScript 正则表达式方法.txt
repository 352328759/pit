replace
stringObj.search(rgExp, 替换文本)
/.../g 全局匹配

search
stringObj.search(rgExp)
只匹配第一個,+g,反复调用都一样

match
stringObj.match(rgExp)
/.../g 全局匹配

exec
rgExp.exec(stringObj)
/.../g 全局匹配
在同一个rgExp上调用exec,每次往后一位匹配,再也找不到匹配的文本时返回null并重头匹配
rgExp.lastIndex指定开始检索位置,每次匹配后rgExp.lastIndex设置为匹配文本的最后一个字符的下一个位置,再也找不到匹配的文本时rgExp.lastIndex重置为 0
循环调用时,g是必要的

test
rgexp.test(stringObj)
返回一个 Boolean 值,表示是否匹配成功

RegExp 对象
通常正则表达式写法: /pattern/attributes
RegExp正则表达式写法: new RegExp(pattern, attributes)
+
text.replace(/([Hh])/g, "($1)");
等价于
var _reg = new RegExp("([Hh])", "g");
text2.replace(_reg, "($1)");
+
replace 里,$[1-9]表示正则表达式中()捕获到的内容, $与()顺序对应, 若正则表达式中没有(), $1视为一般字符"$1"
replace 外,可以用 RegExp.$1 获取捕获结果; RegExp 是对象名,不是变量名,如上例 _reg.$1 是错误用法; RegExp只能取到最近一次的匹配结果
+
RegExp.$1 对[replace, search, match, exec, test] 有效
+
(...)分组+捕获;(?:...)只分组不捕获
text.replace(/([Aa](?:[Rr]))/g, "($1)");
+
RegExp.leftContext 获取捕获结果左边的内容,包括换行内容
RegExp.rightContext 获取捕获结果右边的内容,包括换行内容

反向引用
text.search(/(r)\1/g)
正则表达式里‘\1’可以取到捕获的内容
好像不支持 RegExp正则表达式写法, ‘new RegExp("(r)\1", "g")’ 无效




end